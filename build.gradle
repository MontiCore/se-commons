/* (c) https://github.com/MontiCore/monticore */
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java-library'
    id "io.github.themrmilchmann.ecj" version "0.2.0" // Eclipse compiler as it's much faster than javac
    id "org.sonarqube" version "3.0"
    id "jacoco"
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'
    id 'maven-publish'
}

allprojects {
    group = "de.se_rwth.commons"
    buildDir = file("$projectDir/target")

    repositories {
        if(("true").equals(getProperty('useLocalRepo'))){
            mavenLocal()
        }
        maven {
            credentials.username mavenUser
            credentials.password mavenPassword
            url repo
        }
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin : 'io.github.themrmilchmann.ecj'

    tasks.withType(Test) {
        useJUnit()
        testLogging {
            // controls whether test output is shown
            showStandardStreams= ("false").equals(getProperty('showTestOutput'))? false : true
            showExceptions true
            showCauses true
            showStackTraces true
            exceptionFormat TestExceptionFormat.FULL
            info {
                events TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_OUT
            }
        }
        afterTest { desc, result ->
            logger.lifecycle "${desc.className} > ${desc.name} ${result.resultType}"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                logger.lifecycle startItem + output + endItem
            }
        }
        reports {
            junitXml.required = false
            html.required = false
        }
    }


    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        options.encoding = "UTF-8"
        options.deprecation false
        options.warnings = false
        options.fork = true
        options.headerOutputDirectory.convention(null)
    }
    java {
        withSourcesJar()
    }
}

subprojects {
    apply plugin: 'maven-publish'

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
        repositories.maven {
            credentials.username mavenUser
            credentials.password mavenPassword
            def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/se-commons-releases/"
            def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/se-commons-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

task cleanAll {
  dependsOn(this.subprojects.collect {it.tasks.withType(Delete)})
  dependsOn(tasks.withType(Delete))
}

defaultTasks 'build'